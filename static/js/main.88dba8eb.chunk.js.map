{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAgBeA,EAZF,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC3B,OACE,yBAAKC,UAAW,uDAChB,yBAAKC,IAAK,SAASC,IAAG,+BAA0BH,EAA1B,cACtB,6BACC,4BAAKF,GACL,2BAAIC,MCYOK,EAlBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnB,OACC,6BAECA,EAAOC,KAAK,SAACC,EAAMC,GAClB,OAAQ,kBAAC,EAAD,CACPC,IAAOD,EACPR,GAAKK,EAAOG,GAAGR,GACfF,KAAOO,EAAOG,GAAGV,KACjBC,MAAOM,EAAOG,GAAGT,aCGPW,EAdG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACnB,OACC,yBACCV,UAAY,OACZ,2BACCA,UAAY,mCACZW,KAAO,SACPC,YAAc,gBACdC,SAAYH,MCCDI,G,MARA,SAACC,GACf,OACC,yBAAKC,MAAS,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACtEJ,EAAMK,YCeMC,E,YAlBd,WAAYN,GAAQ,IAAD,8BAClB,4CAAMA,KACDO,MAAQ,CACZC,UAAU,GAHO,E,+EAOFC,EAAOC,GACxBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACP,wDAEDG,KAAKX,MAAMK,a,GAhBSQ,aCkDbC,E,YA5Cd,aAAe,IAAD,8BACb,+CAcDC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAdzC,EAAKZ,MAAQ,CACZlB,OAAQ,GACR4B,YAAa,IAJD,E,iFASO,IAAD,OACnBG,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAACvB,OAAQmC,S,+BAO7B,IAAD,EACwBb,KAAKJ,MAA7BlB,EADA,EACAA,OAAQ4B,EADR,EACQA,YACVQ,EAAiBpC,EAAOqC,QAAO,SAAAC,GACrC,OAAOA,EAAM7C,KAAK8C,cAAcC,SAASZ,EAAYW,kBAGtD,OAAQvC,EAAOyC,OAGd,yBAAK7C,UAAY,MAChB,wBAAIA,UAAY,MAAhB,iBACA,kBAAC,EAAD,CAAWU,aAAgBgB,KAAKI,iBAChC,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU1B,OAAQoC,OAPtB,2C,GA3BgBZ,aCKEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SDwH1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.88dba8eb.chunk.js","sourcesContent":["import React from 'react';\n\n\n\nconst Card = ({name, email, id }) => {\n\treturn (\n\t  <div className= 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt ='robots' src={`https://robohash.org/${id}?200x200`} />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t  </div>\t\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({ robots }) => {\n\treturn (\n\t\t<div>\n\t\t  {\n\t\t\trobots.map ((user, i) => {\n\t\t\t\treturn (<Card \n\t\t\t\t\tkey = {i} \n\t\t\t\t\tid= {robots[i].id} \n\t\t\t\t\tname= {robots[i].name} \n\t\t\t\t\temail={robots[i].email}\n\t\t\t\t\t/>\n\t\t\t    );\n\t\t\t})\n\t\t}\n\t   </div>\n  );\t\t    \n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n\treturn (\n\t\t<div \n\t\t\tclassName = 'pa2'>\n\t\t\t<input \n\t\t\t\tclassName = 'pa3 ba b--green bg-lightest-blue'\n\t\t\t\ttype = 'search' \n\t\t\t\tplaceholder = 'search robots' \n\t\t\t\tonChange = {searchChange}\n\t\t\t\t/>\n\t\t</div>\t\n\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\n\nconst Scroll = (props) => {\n\treturn (\n\t <div style = {{overflowY: 'scroll', border: '0px solid black', height: '500px'}}>\t\n\t\t{props.children}\n\t </div>\t\t\n\t);\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\ncomponentDidCatch(error, info) {\n\tthis.setState({ hasError: true })\n}\n\nrender() {\n\tif (this.state.hasError) {\n\t\treturn <h1>Oooops. That is not good</h1>\n\t}\n\treturn this.props.children\n}\n}\nexport default ErrorBoundary;","import React, {Component} from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchfield: ''\n\t\t}\n\t}\n\n\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then(response => response.json())\n\t\t\t.then(users => this.setState({robots: users}))\n\t}\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({searchfield: event.target.value})\n\t}\n\t\n \trender() {\n \t\tconst { robots, searchfield } = this.state;\n \t\tconst filteredRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase())\n\t\t})\n\n\t\treturn !robots.length ?\n\t\t<h1>Loading</h1> :\n\t\t(\n\t\t\t<div className = 'tc'>\t\n\t\t\t\t<h1 className = 'f1'> RoboFriends </h1>\n\t\t\t\t<SearchBox searchChange = {this.onSearchChange}/>\n\t\t\t\t<Scroll>\n\t\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t\t<CardList robots={filteredRobots} />\t\n\t\t\t\t\t</ErrorBoundary>\n\t\t\t\t</Scroll>\t\n\t\t\t</div>\n \t\t  );\n\t}\n}\n\t\n \n\n\nexport default App;\t\t","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Card from './Card';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport {robots} from './robots';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}